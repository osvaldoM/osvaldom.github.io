{"hash":"4358adcc5242314430677ea8b879a38f53f0aacf","data":{"article":{"id":"8924657a2d689517a9720fec01be4d23","title":"Dealing with currencies in php","content":"<h2 id=\"how-we-operate-with-currencies-in-php-and-what-problems-does-it-have\"><a href=\"#how-we-operate-with-currencies-in-php-and-what-problems-does-it-have\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>How we operate with currencies in PHP and what problems does it have?</h2>\n<p>One recurring mistake developers make is to perform mathematical operations on currencies, using floats(floating point numbers),\nwhich might cause rounding errors and other issues due to how floats are represented in computer hardware. A good explanation for this, can be found in this <a href=\"https://docs.python.org/release/2.5.1/tut/node16.html\" target=\"_blank\" rel=\"noopener\">article</a>.</p>\n<p>One common approach to working with currencies is to use Martin Fowler's money pattern which in summary means:</p>\n<ul>\n<li>Deal in the currencies smallest unit (for dollars that's cents, but don't assume all currencies have the same smallest unit).</li>\n<li>Store amounts as strings (for some cases, integers can be used)</li>\n<li>Perform all arithmetic operations using the BC or GMP extensions. For this example I used BCMath</li>\n</ul>\n<p>This approach is valid for cryptocurrencies as well, but we have to define a base fractional unit for the specific cryptocurrency we want to work with.</p>\n<p>An example of a Money class using this pattern that also takes some ideas from the Money class described in <a href=\"https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530\" target=\"_blank\" rel=\"noopener\">Kent Beck's TDD by example Book</a> is below:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Money</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token doc-comment comment\">/**\n     * The smallest unit of the currency\n     *\n     * <span class=\"token keyword\">@var</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span>\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$fractional_unit</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$currency</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$amount</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currency</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fractional_unit</span> <span class=\"token operator\">=</span> <span class=\"token function\">strval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">currency</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$currency</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * A static function to create a new instance of Money.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token parameter\">$amount</span> numeric value representing the amount\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token parameter\">$currency</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\">Money</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$amount</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currency</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$amount</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'amount must be a numeric value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Money</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$amount</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$currency</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">fractional_unit</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">currency</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isSameCurrency</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token property\">currency</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$right_operand</span><span class=\"token operator\">-></span><span class=\"token property\">currency</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token doc-comment comment\">/**\n     * A static function to return the sum of two instances of Money.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$left_operand</span>\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$right_operand</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\">Money</span>\n     * <span class=\"token keyword\">@throws</span> <span class=\"token class-name\">InvalidArgumentException</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">isSameCurrency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"operands must be of same currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">bcadd</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token doc-comment comment\">/**\n     * A static function to return the difference between two instances of Money.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$left_operand</span>\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$right_operand</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\">Money</span>\n     * <span class=\"token keyword\">@throws</span> <span class=\"token class-name\">InvalidArgumentException</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">isSameCurrency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"operands must be of same currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">bcsub</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token doc-comment comment\">/**\n     * A static function to return the multiplication of two instances of Money.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$left_operand</span>\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$right_operand</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\">Money</span>\n     * <span class=\"token keyword\">@throws</span> <span class=\"token class-name\">InvalidArgumentException</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">isSameCurrency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"operands must be of same currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">bcmul</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token doc-comment comment\">/**\n     * A static function to return the division of two instances of Money.\n     *\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$left_operand</span>\n     * <span class=\"token keyword\">@param</span> <span class=\"token class-name\">Money</span> <span class=\"token parameter\">$right_operand</span>\n     * <span class=\"token keyword\">@return</span> <span class=\"token class-name\">Money</span>\n     * <span class=\"token keyword\">@throws</span> <span class=\"token class-name\">InvalidArgumentException</span>\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token class-name type-declaration\">Money</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token scope\"><span class=\"token keyword\">static</span><span class=\"token punctuation\">::</span></span><span class=\"token function\">isSameCurrency</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"operands must be of same currency\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token function\">bcdiv</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$right_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$left_operand</span><span class=\"token operator\">-></span><span class=\"token function\">getCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n<h2 id=\"testing-the-class\"><a href=\"#testing-the-class\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Testing the class</h2>\n<p>I added a few tests to verify that this class works properly. After having spent weeks reading Kent Beck's Book, I probably should have started\nby adding the tests before implementing the class but well, here goes nothing:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">require</span> <span class=\"token string single-quoted-string\">'Money.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">PHPUnit<span class=\"token punctuation\">\\</span>Framework<span class=\"token punctuation\">\\</span>TestCase</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">product</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestCase</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testMoneyCanBeCreatedFromValidAmountAndCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertInstanceOf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n            <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">3050</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testMoneyCannotBeCreatedFromInvalidAmountAndCurrency</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">expectException</span><span class=\"token punctuation\">(</span><span class=\"token scope\">InvalidArgumentException<span class=\"token punctuation\">::</span></span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'3050B'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testCanSumTwoMoneys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$m1</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$m2</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000.5</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$sum</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$m1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$m2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">4200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$sum</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testCanDiffTwoMoneys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$m1</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$m2</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">400.544</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$difference</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$m2</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$m1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$difference</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testCanMultiplyTwoMoneys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$m1</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$m2</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">250.5</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$product</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$m1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$m2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">501</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$product</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testCanDivideTwoMoneys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$m1</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">610</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$m2</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'USD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token variable\">$quotient</span> <span class=\"token operator\">=</span> <span class=\"token scope\">Money<span class=\"token punctuation\">::</span></span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$m1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$m2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token this\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span>\n            <span class=\"token number\">203</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$quotient</span><span class=\"token operator\">-></span><span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre>\n<h2 id=\"what-is-the-best-way-to-store-them-in-the-database\"><a href=\"#what-is-the-best-way-to-store-them-in-the-database\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>What is the best way to store them in the Database?</h2>\n<p>I believe that the best way for storing currencies in the database whenever possible would be to store the value as a decimal/numeric data type in one column and store the currency in a separate column (either a Foreign Key or an ISO currency code). Decimal/numeric data types have enough precision to support most common operations on currencies without losing accuracy.</p>\n<p>Alternatively, they could be stored as strings(eg: 250 USD) but this could make arithmetic database operations more difficult, which would also make reporting/analytics for instance, more complicated.</p>\n<h2 id=\"articles-about-martin-fowlers-pattern\"><a href=\"#articles-about-martin-fowlers-pattern\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Articles about Martin Fowler's pattern:</h2>\n<p><a href=\"https://code.tutsplus.com/tutorials/money-pattern-the-right-way-to-represent-value-unit-pairs--net-35509\" target=\"_blank\" rel=\"noopener\">https://code.tutsplus.com/tutorials/money-pattern-the-right-way-to-represent-value-unit-pairs--net-35509</a>\n<a href=\"https://culttt.com/2014/05/28/handle-money-currency-web-applications/\" target=\"_blank\" rel=\"noopener\">https://culttt.com/2014/05/28/handle-money-currency-web-applications/</a>\n<a href=\"https://culttt.com/2014/06/04/working-money-currency-php/\" target=\"_blank\" rel=\"noopener\">https://culttt.com/2014/06/04/working-money-currency-php/</a>\n<a href=\"https://www.reddit.com/r/PHP/comments/4sxukz/how_to_properly_handle_money_in_php_and_mysql/\" target=\"_blank\" rel=\"noopener\">https://www.reddit.com/r/PHP/comments/4sxukz/how_to_properly_handle_money_in_php_and_mysql/</a></p>\n<h2 id=\"comparison-of-several-patterns-for-the-money-class\"><a href=\"#comparison-of-several-patterns-for-the-money-class\" aria-hidden=\"true\"><span class=\"icon icon-link heading-anchor\"></span></a>Comparison of several patterns for the Money class</h2>\n<p><a href=\"https://deque.blog/2017/08/17/a-study-of-4-money-class-designs-featuring-martin-fowler-kent-beck-and-ward-cunningham-implementations/\" target=\"_blank\" rel=\"noopener\">https://deque.blog/2017/08/17/a-study-of-4-money-class-designs-featuring-martin-fowler-kent-beck-and-ward-cunningham-implementations/</a></p>\n","published":"October 10, 2020","updated":"February 9, 2021","summary":"One recurring mistake developers make is to perform mathematical operations on currencies using floats(floating point numbers), which might cause rounding errors and other issues.","tags":[{"title":"php","path":"/blog/tag/php/"}]}},"context":{}}